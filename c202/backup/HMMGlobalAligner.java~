package edu.ucla.chem202.algorithm.hmm;

/*
 * Author: Teresa Breyer, Gary Chen, Sul-min Kim
 * Created: Saturday, November 15, 2003 11:06:55 PM
 * Modified: Saturday, November 15, 2003 11:06:55 PM
 */

import edu.ucla.chem202.*;
import edu.ucla.chem202.io.*;
import edu.ucla.chem202.algorithm.*;
import edu.ucla.chem202.algorithm.hmm.*;
import java.util.List;
import java.lang.Math;
import java.util.*;
import java.lang.reflect.*;

import java.io.FileInputStream;
import java.io.FileOutputStream;

/**
* Align two sequences using dynamic programming.
*/
	
public class HMMGlobalAligner
	implements HMMAligner
{
	private HMM myHMM;
	private Sequence curSeq;
	private double probability;
        private double probBaseE; // the var probability, but not converted to log 10
	private int numberResidues;
	private int numberColumns;
	private Cell[][] matrix;
	// the following variables are deprecated. remove asap.
	private	double[][] D; // move to DELETION
	private double[][] M; // move to MATCH

	
	/**
	* @author: Teresa Breyer
	*/
	
	
	public void init(HMM hiddenMarkovModel)
	{
		myHMM = hiddenMarkovModel;
	}
	
	/**
	* @author: Teresa Breyer
	*/

	public void computeBackwardProbs()
	throws DataFormatException	{
		StringBuffer sequence = new StringBuffer(curSeq.getRawSeq());

		numberResidues = curSeq.getLength();
		numberColumns = myHMM.getLength();

		matrix[numberColumns - 1][numberResidues].bMatch = Math.log(myHMM.getTransitionProb(myHMM.MATCH, myHMM.END, numberColumns));

		matrix[numberColumns - 1][numberResidues].bDelete = Math.log(myHMM.getTransitionProb(myHMM.DELETION, myHMM.END, numberColumns));

		// last row of M
		for (int j = numberResidues - 1; j >=0 ; j--)
			matrix[numberColumns - 1][j].bMatch = matrix[numberColumns - 1][j+1].bMatch +				
			Math.log(myHMM.getEmissionProb(myHMM.MATCH,sequence.charAt(j), 
			numberColumns - 1)) + Math.log(myHMM.getTransitionProb(myHMM.MATCH, myHMM.INSERTION,  
			numberColumns - 1));

		// last row of D
		for (int j = numberResidues - 2; j >=0 ; j--)
			matrix[numberColumns - 1][j].bDelete = 0; // -INF	// can't go to INSERTION directly, so not possible

		// last column of D
		for (int i = numberColumns - 2; i >= 0;  i--)
		{
			//Logger.debugln("i=" + i + " " + myHMM.getTransitionProb(myHMM.DELETION, myHMM.DELETION,i+1));
			matrix[i][numberResidues].bDelete = matrix[i+1][numberResidues].bDelete +
				Math.log(myHMM.getTransitionProb(myHMM.DELETION, myHMM.DELETION,i+1));
		}

		// last column of M
		for (int i = numberColumns - 2; i >= 0; i--)
		{	
			//Logger.debugln("i=" + i);
			matrix[i][numberResidues].bMatch = matrix[i+1][numberResidues].bDelete +
				Math.log(myHMM.getTransitionProb(myHMM.MATCH, myHMM.DELETION,i+1));
		}

		// need the second last row and columns because of the -INF entries in last row and column

		// second last row of M
		for (int j = numberResidues - 1; j >=0 ; j--)
			matrix[numberColumns - 2][j].bMatch = MathUtil.addLogLog(matrix[numberColumns - 1][j+1].bMatch +
					Math.log(myHMM.getEmissionProb(myHMM.MATCH,sequence.charAt(j), numberColumns - 1)) +
					Math.log(myHMM.getTransitionProb(myHMM.MATCH, myHMM.MATCH, numberColumns - 1)),
					matrix[numberColumns - 2][j+1].bMatch + Math.log(myHMM.getEmissionProb(myHMM.MATCH, sequence.charAt(j), 
					numberColumns - 2)) + Math.log(myHMM.getTransitionProb(myHMM.MATCH, myHMM.INSERTION, numberColumns - 2)));

		// second last row of D
		for (int j = numberResidues - 1; j >=0 ; j--) {
			//Logger.debugln("j=" + j + " " +  matrix[numberColumns - 1][j+1].bMatch + " " + myHMM.getEmissionProb(myHMM.MATCH,sequence.charAt(j), numberColumns - 1) + " " +myHMM.getTransitionProb(myHMM.DELETION, myHMM.MATCH, numberColumns - 1));
			matrix[numberColumns - 2][j].bDelete = matrix[numberColumns - 1][j+1].bMatch + Math.log(myHMM.getEmissionProb(myHMM.MATCH,sequence.charAt(j), numberColumns - 1)) +
				Math.log(myHMM.getTransitionProb(myHMM.DELETION, myHMM.MATCH, numberColumns - 1));
		}

		// general case
		for (int i = numberColumns - 3; i >= 0; i--) {
			for (int j = numberResidues - 1; j >= 0; j--) {

				/*matrix[i][j].bMatch = matrix[i+1][j+1].bMatch * 
				myHMM.getEmissionProb(myHMM.MATCH,sequence.charAt(j+1), i+1) * 
				myHMM.getTransissionProb(myHMM.MATCH, myHMM.MATCH, i+1) +
					matrix[i][j+1].bMatch * myHMM.getEmissionProb(myHMM.MATCH, 
				sequence.charAt(j+1), i) * myHMM.getTransitionProb(myHMM.MATCH, 
				myHMM.INSERTION, i) +
					matrix[i+1][j].bDelete * myHMM.getTransitionProb(myHMM.MATCH, 
				myHMM.DELETION, i+1); */
				/*Logger.debugln("Match " + matrix[i+1][j+1].bMatch + " " + myHMM.getEmissionProb(myHMM.MATCH,sequence.charAt(j), i+1) + " " +
						myHMM.getTransitionProb(myHMM.MATCH, myHMM.MATCH, i+1));
				Logger.debugln("Insertion " + matrix[i][j+1].bMatch + " " + myHMM.getEmissionProb(myHMM.MATCH, sequence.charAt(j), i) + " " +
					myHMM.getTransitionProb(myHMM.MATCH, myHMM.INSERTION, i));
				Logger.debugln("Deletion " + matrix[i+1][j].bDelete + " " + myHMM.getTransitionProb(myHMM.MATCH, myHMM.DELETION, i+1) + " " );*/
				matrix[i][j].bMatch = MathUtil.addLogLog(matrix[i+1][j+1].bMatch + 
					Math.log(myHMM.getEmissionProb(myHMM.MATCH,sequence.charAt(j), i+1)) +
					Math.log(myHMM.getTransitionProb(myHMM.MATCH, myHMM.MATCH, i+1)),
					matrix[i][j+1].bMatch + Math.log(myHMM.getEmissionProb(myHMM.MATCH, sequence.charAt(j), i)) +
					Math.log(myHMM.getTransitionProb(myHMM.MATCH, myHMM.INSERTION, i)),
					matrix[i+1][j].bDelete + Math.log(myHMM.getTransitionProb(myHMM.MATCH, myHMM.DELETION, i+1)));

				/*matrix[i][j].bDelete = matrix[i+1][j].bDelete *  
				myHMM.getTransitionProb(myHMM.DELETION, myHMM.DELETION, i+1) +
					matrix[i+1][j+1].bMatch * 
				myHMM.getEmissionProb(myHMM.MATCH,sequence.charAt(j+1), i+1) * 
				myHMM.getTransitionProb(myHMM.DELETION, myHMM.MATCH, i+1);*/
				/*Logger.debugln("Match " + matrix[i+1][j+1].bMatch + " " + myHMM.getEmissionProb(myHMM.MATCH,sequence.charAt(j), i+1) + " "
					+ myHMM.getTransitionProb(myHMM.DELETION, myHMM.MATCH, i+1));
				Logger.debugln("Delete " + matrix[i+1][j].bDelete + " " + myHMM.getTransitionProb(myHMM.DELETION, myHMM.DELETION, i+1));*/
				matrix[i][j].bDelete = MathUtil.addLogLog(matrix[i+1][j].bDelete + 
					Math.log(myHMM.getTransitionProb(myHMM.DELETION, myHMM.DELETION, i+1)),
					matrix[i+1][j+1].bMatch + Math.log(myHMM.getEmissionProb(myHMM.MATCH,sequence.charAt(j), i+1)) +
					Math.log(myHMM.getTransitionProb(myHMM.DELETION, myHMM.MATCH, i+1)));

				}
		}
		// first row - first colum - last row
		// first column
		for (int i = 0; i < numberColumns; i++)
			matrix[i][0].pMatch =  0;//-INF
		for (int i = 0; i < numberColumns-1; i++)
			matrix[i][0].pDelete =  matrix[i][0].bDelete + matrix[i][0].fDelete;
		
		// first row
		for (int  j = 1; j < numberResidues + 1 ; j++)
			matrix[0][j].pMatch = matrix[0][j].bMatch + matrix[0][j].fMatch;	
		for (int  j = 1; j < numberResidues + 1 ; j++)
			matrix[0][j].pDelete = 0;//-INF
		
		//last row
		for (int  j = 1; j < numberResidues + 1 ; j++)
			matrix[numberColumns-1][j].pMatch = matrix[numberColumns-1][j].bMatch + matrix[numberColumns-1][j].fMatch;	
		for (int  j = 0; j < numberResidues ; j++)
			matrix[numberColumns-1][j].pDelete = 0;//-INF
		matrix[numberColumns-1][numberResidues].pDelete = matrix[numberColumns-1][numberResidues].bDelete + matrix[numberColumns-1][numberResidues].fDelete;

		// general case
		for (int i = 1; i < numberColumns - 1; i++) {
			for (int j = 1; j < numberResidues + 1; j++) {
				matrix[i][j].pMatch = matrix[i][j].bMatch + matrix[i][j].fMatch;
				matrix[i][j].pDelete = matrix[i][j].bDelete + matrix[i][j].fDelete;
			}
		}
	}

	/**
	* @author: Teresa Breyer
	*/

	public void computeForwardProbs()
	throws DataFormatException
	{
		StringBuffer sequence = new StringBuffer(curSeq.getRawSeq());

		numberResidues = curSeq.getLength();
		numberColumns = myHMM.getLength();

		matrix[0][0].fDelete = Math.log(myHMM.getTransitionProb(myHMM.BEGIN, 
			myHMM.DELETION, 0));
		matrix[0][1].fMatch = Math.log(myHMM.getEmissionProb(myHMM.MATCH, 
			sequence.charAt(0), 0) ) +
			Math.log(myHMM.getTransitionProb(myHMM.BEGIN, myHMM.MATCH, 0));

		// first row of M
		for (int j = 2; j < numberResidues + 1; j++) {
			matrix[0][j].fMatch = Math.log(myHMM.getEmissionProb(myHMM.MATCH, 
				sequence.charAt(j-1), 0)) +
				matrix[0][j-1].fMatch + Math.log( myHMM.getTransitionProb(myHMM.MATCH, 
				myHMM.INSERTION, 0)) ;
		}

		// first column of D
		for (int i = 1; i < numberColumns; i++) {
			matrix[i][0].fDelete = matrix[i-1][0].fDelete + 
			Math.log(myHMM.getTransitionProb(myHMM.DELETION, myHMM.DELETION, i));
		}

		matrix[1][1].fDelete =  matrix[0][1].fMatch + Math.log(myHMM.getTransitionProb(myHMM.MATCH, myHMM.DELETION, 1));
		Logger.debugln("1 1");
		matrix[1][1].fMatch = Math.log(myHMM.getEmissionProb(myHMM.MATCH, sequence.charAt(0), 1)) +
		matrix[0][0].fDelete + Math.log(myHMM.getTransitionProb(myHMM.DELETION, myHMM.MATCH, 1)) ;

		//second column both
		for (int i = 2; i < numberColumns; i++) {
			matrix[i][1].fDelete = MathUtil.addLogLog(matrix[i-1][1].fMatch + Math.log(myHMM.getTransitionProb(myHMM.MATCH, myHMM.DELETION, i)),
				matrix[i-1][1].fDelete + Math.log(myHMM.getTransitionProb(myHMM.DELETION, myHMM.DELETION, i))); // second column of D
			matrix[i][1].fMatch = Math.log(myHMM.getEmissionProb(myHMM.MATCH, sequence.charAt(0), i)) +
				matrix[i-1][0].fDelete + Math.log(myHMM.getTransitionProb(myHMM.DELETION, myHMM.MATCH, i)) ;
		}

		// second row both
		for (int j = 2; j < numberResidues + 1; j++) {
			matrix[1][j].fMatch = Math.log(myHMM.getEmissionProb(myHMM.MATCH, sequence.charAt(j-1), 1)) +
				MathUtil.addLogLog(matrix[0][j-1].fMatch + Math.log(myHMM.getTransitionProb(myHMM.MATCH, myHMM.MATCH, 1)),
					matrix[1][j-1].fMatch + Math.log(myHMM.getTransitionProb(myHMM.MATCH, myHMM.INSERTION, 1)));
			matrix[1][j].fDelete = matrix[0][j].fMatch + Math.log(myHMM.getTransitionProb(myHMM.MATCH, myHMM.DELETION, 1));
		}

		// general case
		for (int i = 2; i < numberColumns; i++) {
			for (int j = 2; j < numberResidues + 1; j++) {

				matrix[i][j].fMatch = Math.log(myHMM.getEmissionProb(myHMM.MATCH, sequence.charAt(j-1), i)) +
					MathUtil.addLogLog(matrix[i-1][j-1].fMatch + Math.log(myHMM.getTransitionProb(myHMM.MATCH, myHMM.MATCH, i)),
					matrix[i][j-1].fMatch + Math.log(myHMM.getTransitionProb(myHMM.MATCH, myHMM.INSERTION, i)),
					matrix[i-1][j-1].fDelete + Math.log(myHMM.getTransitionProb(myHMM.DELETION, myHMM.MATCH, i))) ;
				matrix[i][j].fDelete = MathUtil.addLogLog(matrix[i-1][j].fMatch + Math.log(myHMM.getTransitionProb(myHMM.MATCH, myHMM.DELETION, i)),
					matrix[i-1][j].fDelete + Math.log(myHMM.getTransitionProb(myHMM.DELETION, myHMM.DELETION, i)));
			}
		}

		if (matrix[numberColumns-1][numberResidues].fMatch >= matrix[numberColumns-1][numberResidues].fDelete) {
			Logger.debugln("prob for match greater than delete");
			probBaseE = matrix[numberColumns-1][numberResidues].fMatch + 
			    Math.log(1 + Math.exp(matrix[numberColumns-1][numberResidues].fDelete-
						  matrix[numberColumns-1][numberResidues].fMatch));
			probability = (matrix[numberColumns-1][numberResidues].fMatch +	Math.log(1 + Math.exp(matrix[numberColumns-1][numberResidues].fDelete- 
				matrix[numberColumns-1][numberResidues].fMatch))) / Math.log(10);
		} else {
			Logger.debugln("prob for match less than delete");
			probBaseE = matrix[numberColumns-1][numberResidues].fDelete +
			    Math.log(1 + Math.exp(matrix[numberColumns-1][numberResidues].fMatch-
						  matrix[numberColumns-1][numberResidues].fDelete));
			probability = (matrix[numberColumns-1][numberResidues].fDelete +
				Math.log(1 + Math.exp(matrix[numberColumns-1][numberResidues].fMatch- 
				matrix[numberColumns-1][numberResidues].fDelete))) / Math.log(10);
		}
	}
	
	/**
	* @author: Gary Chen
	*/

	private void pad(String toFormat) {
		int cellwidth = 6;
		int strWidth = toFormat.length(); 
		for (int i=0;i<cellwidth-strWidth;i++) {
			Logger.debug(" ");
		}
		Logger.debug(toFormat);
	}
	
	private void printDataStructure(String fieldName, Class fieldType) {
		
		try {
			for (int i = 0; i < matrix.length; i++) {
				for (int j = 0; j < matrix[0].length; j++) {
					Class cellClass = matrix[i][j].getClass();
					Field field = cellClass.getDeclaredField(fieldName);
					if (fieldType.toString().equals("double")) {
						pad(""+MathUtil.round(field.getDouble(matrix[i][j])));
					}
					else if (fieldType.toString().equals("int")) {
						pad(""+field.getInt(matrix[i][j]));
					}					
					else if (fieldType.toString().equals("class edu.ucla.chem202.algorithm.hmm.HMMGlobalAligner$Cell")) {
						Cell prevCell = (Cell)field.get(matrix[i][j]);
						if (prevCell!=null)	pad(prevCell.yLoc+","+prevCell.xLoc);
						else pad("null");
					}
					else if (fieldType.toString().equals("byte")) {
						byte byteValue = field.getByte(matrix[i][j]);
						char code = ' ';
						switch (byteValue) {
						case HMM.DELETION:
							code = 'D';
							break;
						case HMM.INSERTION:
							code = 'I';
							break;
						case HMM.MATCH:
							code = 'M';
							break;
						case HMM.BEGIN:
							code = 'B';
							break;
						case HMM.END:
							code = 'E';
							break;
						default:
							code = '*';
						}
						Logger.debug(code+"");
					}
					Logger.debug(" ");
				}
				Logger.debugln("");
			}
		}
		catch (Exception ex) {
			Logger.debugln("Couldn't output datastructure for "+fieldName+" because "+ex.getMessage());
			ex.printStackTrace();
		}
	}
	
	/**
	* @author: Gary Chen
	*/

	public void printDataStructure()
	{
		Class cellClass = new Cell().getClass();
		Field[] fields = cellClass.getDeclaredFields();
		Logger.debugln("Cell has "+fields.length+" fields.");
		for (int count=0;count<fields.length;count++) {			
			Class fieldType = fields[count].getType();
			String fieldName = fields[count].getName();
			Logger.debugln("");
			Logger.debugln("field "+fieldName+" of type "+fieldType.toString()+":");			
			printDataStructure(fields[count].getName(),fields[count].getType());
		}
	}
	
	/**
	* @author: Gary Chen
	* All this does is populate the grid	
	*/
	
	public void align(Sequence seq)
	throws DataFormatException{
		curSeq = seq;
		int hmmLengh = myHMM.getLength();
		int seqLength = seq.getLength()+1;
		matrix = new Cell[hmmLengh][seqLength];
		for (int y=0;y<hmmLengh;y++) {
			for (int x=0;x<seqLength;x++) {
				matrix[y][x] = new Cell();
				matrix[y][x].yLoc = y;
				matrix[y][x].xLoc = x;
			}
		}
		computeForwardProbs();
		computeBackwardProbs();
		computeViterbiProbs();
	}
	
	/**
	* @author: Gary Chen
	* Compute best path and generate traceback
	* Code is handling boundary conditions first before general conditions for performance reasons.
	*/
	
	public void computeViterbiProbs()
	throws DataFormatException {
		String sequence = curSeq.getRawSeq();
		// *** FIRST ROW AND COLUMN ***
		// initial condition for delete state from begin
		matrix[0][0].vDelete = Math.log(myHMM.getTransitionProb(HMM.BEGIN, HMM.DELETION, 0));
		matrix[0][0].prevStateToDelete = HMM.BEGIN;		
		// first column of D.  DEGENERATE condition where only previous move available which is deletion.
		for (int i = 1; i < numberColumns; i++) {	
			matrix[i][0].vDelete = matrix[i-1][0].vDelete + Math.log(myHMM.getTransitionProb(HMM.DELETION, HMM.DELETION, i));			
			matrix[i][0].deleteTraceBack = matrix[i-1][0]; // only one traceback possible. point up for deletion
			matrix[i][0].prevStateToDelete = HMM.DELETION;	// previous move was a deletion
		}
		// initial condition for match state from begin		
		matrix[0][1].vMatch = Math.log(myHMM.getEmissionProb(HMM.MATCH, sequence.charAt(0), 0) ) + 
			Math.log(myHMM.getTransitionProb(HMM.BEGIN, HMM.MATCH, 0));
		matrix[0][1].prevStateToMatch = HMM.BEGIN;
		// first row of M. DEGENERATE condition where only previous move available which is insertion.
		for (int j = 2; j < numberResidues + 1; j++) {
			matrix[0][j].vMatch = Math.log(myHMM.getEmissionProb(HMM.MATCH, sequence.charAt(j-1), 0)) + 
				matrix[0][j-1].vMatch + Math.log( myHMM.getTransitionProb(HMM.MATCH, HMM.INSERTION, 0)) ;
			matrix[0][j].matchTraceBack = matrix[0][j-1];  // only one traceback possible. point left for insertion
			matrix[0][j].prevStateToMatch = HMM.INSERTION; // previous move was a insertion
		}
		// *** SECOND ROW AND COLUMN ***
		// DEGENERATE condition for delete state where the ONLY previous state can be a match
		matrix[1][1].vDelete =  matrix[0][1].vMatch + Math.log(myHMM.getTransitionProb(HMM.MATCH, HMM.DELETION, 1));
		matrix[1][1].deleteTraceBack = matrix[0][1];
		matrix[1][1].prevStateToDelete = HMM.MATCH;
		// DEGENERATE condition for match state where the ONLY previous state can be a delete
		matrix[1][1].vMatch = Math.log(myHMM.getEmissionProb(HMM.MATCH, sequence.charAt(0), 1)) + 
				matrix[0][0].vDelete + Math.log(myHMM.getTransitionProb(HMM.DELETION, HMM.MATCH, 1)) ;
		matrix[1][1].matchTraceBack = matrix[0][1];
		matrix[1][1].prevStateToMatch = HMM.DELETION;
		//second column of match and delete		
		for (int i = 2; i < numberColumns; i++) {
			// normal condition for delete state where the ONLY two previous states are a match and delete
			double m2d = MathUtil.addLog(matrix[i-1][1].vMatch, myHMM.getTransitionProb(HMM.MATCH, HMM.DELETION, i));
			double d2d = MathUtil.addLog(matrix[i-1][1].vDelete, myHMM.getTransitionProb(HMM.DELETION, HMM.DELETION, i));			
			matrix[i][1].deleteTraceBack = matrix[i-1][1];
			if (d2d>=m2d) {
				matrix[i][1].vDelete = d2d;
				matrix[i][1].prevStateToDelete = HMM.DELETION;
			}
			else {
				matrix[i][1].vDelete = m2d; 
				matrix[i][1].prevStateToDelete = HMM.MATCH;
			}			
			// DEGENERATE condition for match state where the ONLY previous state can be a delete
			matrix[i][1].vMatch = Math.log(myHMM.getEmissionProb(HMM.MATCH, sequence.charAt(0), i)) + 
				matrix[i-1][0].vDelete + Math.log(myHMM.getTransitionProb(HMM.DELETION, HMM.MATCH, i));
			matrix[i][1].matchTraceBack = matrix[i-1][0];
			matrix[i][1].prevStateToMatch = HMM.DELETION;			
		}		
		// second row of match and delete.  
		for (int j = 2; j < numberResidues + 1; j++) {
			// DEGENERATE condition for match state where the ONLY two previous state can be a match or insertion
			double m2m = MathUtil.addLog(matrix[0][j-1].vMatch, myHMM.getTransitionProb(HMM.MATCH, HMM.MATCH, 1));
			double m2i = MathUtil.addLog(matrix[1][j-1].vMatch, myHMM.getTransitionProb(HMM.MATCH, HMM.INSERTION, 1));
			matrix[1][j].matchTraceBack = matrix[0][j-1];
			if (m2m>=m2i) {
				matrix[1][j].vMatch = Math.log(myHMM.getEmissionProb(HMM.MATCH, sequence.charAt(j-1), 1)) + m2m;				
				matrix[1][j].prevStateToMatch = HMM.MATCH;
			}
			else {
				matrix[1][j].vMatch = Math.log(myHMM.getEmissionProb(HMM.MATCH, sequence.charAt(j-1), 1)) + m2i;				
				matrix[1][j].prevStateToMatch = HMM.INSERTION;
			}			
			// DEGENERATE condition for delete state where the ONLY previous state can be a match
			matrix[1][j].vDelete = matrix[0][j].vMatch + Math.log(myHMM.getTransitionProb(HMM.MATCH, HMM.DELETION, 1));
			matrix[1][j].deleteTraceBack = matrix[0][j];
			matrix[1][j].prevStateToDelete = HMM.MATCH;			
		}		
		// *** GENERAL CASE ***
		for (int i = 2; i < numberColumns; i++) {
			for (int j = 2; j < numberResidues + 1; j++) {				
				// normal condition for match state where the ONLY three previous states are a match, insert, and delete
				double m2m = MathUtil.addLog(matrix[i-1][j-1].vMatch, myHMM.getTransitionProb(HMM.MATCH, HMM.MATCH, i));
				double m2i = MathUtil.addLog(matrix[i][j-1].vMatch, myHMM.getTransitionProb(HMM.MATCH, HMM.INSERTION, i));
				double d2m = MathUtil.addLog(matrix[i-1][j-1].vDelete, myHMM.getTransitionProb(HMM.DELETION, HMM.MATCH, i));
				if ((m2i>=d2m) && (m2i>=m2m)) {
					matrix[i][j].vMatch = Math.log(myHMM.getEmissionProb(HMM.MATCH, sequence.charAt(j-1), i)) + m2i;
					matrix[i][j].matchTraceBack = matrix[i][j-1];
					matrix[i][j].prevStateToMatch = HMM.INSERTION;
				}
				else {
					matrix[i][j].matchTraceBack = matrix[i][j-1];
					if (m2m>=d2m) {
						matrix[i][j].vMatch = Math.log(myHMM.getEmissionProb(HMM.MATCH, sequence.charAt(j-1), i)) + m2m;						
						matrix[i][j].prevStateToMatch = HMM.MATCH;
					}
					else {
						matrix[i][j].vMatch = Math.log(myHMM.getEmissionProb(HMM.MATCH, sequence.charAt(j-1), i)) + d2m;						
						matrix[i][j].prevStateToMatch = HMM.DELETION;
					}
				}				
				// normal condition for delete state where the ONLY two previous states are a match and delete
				double m2d = MathUtil.addLog(matrix[i-1][j].vMatch,  myHMM.getTransitionProb(HMM.MATCH, HMM.DELETION, i));
				double d2d = MathUtil.addLog(matrix[i-1][j].vDelete, myHMM.getTransitionProb(HMM.DELETION, HMM.DELETION, i));
				matrix[i][j].deleteTraceBack = matrix[i-1][j];
				if (d2d>=m2d) {
					matrix[i][j].vDelete = d2d;
					matrix[i][j].prevStateToDelete = HMM.DELETION;
				}
				else {
					matrix[i][j].vDelete = m2d;
					matrix[i][j].prevStateToDelete = HMM.MATCH;
				}				
			}
		}
	}

	/**
	* @author: Teresa Breyer
	*/
	
	
	public double getTotalProb()
	{
		return probability;
	}
	
	/**
	* @author: Sul-min Kim
	*/	
	
	public void printPosteriorProbs() {
	    // start from bottom right cell
	    // get its traceback cell
	    // get the traceback state of the traceback cell to determine whether to emit something or not
	    // print the posterior prob at the cell
	    // repeat until traceback is null	
		
	    
	    String sequence = curSeq.getRawSeq();
	    int i = matrix.length-1; //index of last row element;
	    int j = matrix[0].length-1; //index of last col element -> numberResidues-1;
	    Cell currCell = matrix[i][j]; //start traceback at last array element
	    List output = new ArrayList(); //hold output for stdout

	    Logger.debugln("*****SMK DEBUG*****");

	    // determine which traceback to use. if the final value of the matchTB >= delTB, use matchTB.
	    // else use the delTB.
	    byte whichTB;
	    if(currCell.vMatch >= currCell.vDelete){ 
		whichTB=HMM.MATCH;
		Logger.debugln("Gonna use MatchTB: "+currCell.vMatch);
	    }
	    else{ 
		whichTB=HMM.DELETION;
		Logger.debugln("Gonna use DelTB: "+currCell.vDelete);
	    }

	    Logger.debugln("(i,j) "+i+" "+j+" seq: "+sequence+ " TotProbBase 10: "+probability+" TotProbBaseE: "+probBaseE);

	    while(currCell != null){
		Logger.debugln("while y,x = "+currCell.yLoc+","+currCell.xLoc+" pMatch:"+currCell.pMatch );
		//Logger.debugln("\tcurrCell tb = "+currCell.matchTraceBack.xLoc+" "+currCell.matchTraceBack.yLoc);
		
		if(whichTB == HMM.MATCH){
		    //currTBState = currCell.matchTraceBack.prevStateToMatch;
		    if(currCell.prevStateToMatch != HMM.DELETION){
			output.add("COLUMN:"+i+" LETTER:"+sequence.charAt(i)+" PROB="+ 
				   MathUtil.round( Math.exp( currCell.pMatch - probBaseE )/Math.log(10) * 100 ) +
				   " x,y: " +currCell.xLoc+","+currCell.yLoc+" pMatch: "+currCell.pMatch+
				   " probE: "+probBaseE);
		    }
		    if(currCell.prevStateToMatch == HMM.DELETION){
			output.add("COLUMN:"+i+" LETTER:- PROB="+ 
				   MathUtil.round( Math.exp( currCell.pMatch - probBaseE )/Math.log(10) * 100 ) +
				   " x,y: " +currCell.xLoc+","+currCell.yLoc+" pMatch: "+currCell.pMatch+
				   " probE: "+probBaseE); //push into the array the                                                
		    }
		    if(matrix[i][j].matchTraceBack.prevStateToMatch != HMM.BEGIN){
			currCell = matrix[i][j].matchTraceBack;
			i = currCell.yLoc;
			j = currCell.xLoc;
		    }
		    else{
			Logger.debugln("breakin");
			break;
		    }
		}
		if(whichTB == HMM.DELETION){
		    //currTBState = currCell.deleteTraceBack.prevStateToDelete;
		    if(currCell.prevStateToDelete != HMM.DELETION){
			output.add("COLUMN:"+j+" LETTER:"+sequence.charAt(j-1)+" PROB="+ 
				   MathUtil.round( Math.exp( currCell.pMatch - getTotalProb() ) * 100 ) + 
				   " x,y: " +currCell.xLoc+","+currCell.yLoc+" pDel: "+currCell.pDelete+
				   " probE: "+probBaseE);
		    }
		    if(currCell.prevStateToDelete == HMM.DELETION){
			output.add("COLUMN:"+j+" LETTER:- PROB="+ 
				   MathUtil.round( Math.exp( currCell.pMatch - getTotalProb() ) * 100 ) +
				   " x,y: " +currCell.xLoc+","+currCell.yLoc+" pDel: "+currCell.pDelete+
				   " probE: "+probBaseE); //push into the array the 
		    }
		    if(matrix[i][j].deleteTraceBack.prevStateToDelete != HMM.BEGIN && 
		       matrix[i][j].deleteTraceBack != null){
			currCell = matrix[i][j].deleteTraceBack;
			i = currCell.yLoc;
			j = currCell.xLoc;
		    }
		    else{
			break;
		    }
		}
	    }
	    if(output.size() > 0){
		for(int k=output.size()-1; k>=0; k--){
		    Logger.println( output.get(k).toString() );
		}
	    }
	    Logger.debugln("*****SMK DEBUG DONE*****");		
	}	
	
	class Cell {		
		double fMatch;
		double fDelete;
		double bMatch;
		double bDelete;
		double vMatch;
		double vDelete;
		double pMatch;
		double pDelete;
		int xLoc;
		int yLoc;
		Cell matchTraceBack;
		byte prevStateToMatch;
		Cell deleteTraceBack;
		byte prevStateToDelete;
		byte traceBackState;		// to be removed.
		Cell traceBack;			// to be removed
	}
}
